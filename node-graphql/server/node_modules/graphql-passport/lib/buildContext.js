"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _passport = _interopRequireDefault(require("passport"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var promisifiedAuthenticate = function promisifiedAuthenticate(req, res, name, options) {
  return new Promise(function (resolve, reject) {
    return _passport["default"].authenticate(name, options, function (err, user, info) {
      if (err) reject(err);else resolve({
        user: user,
        info: info
      });
    })(req, res);
  });
};

var promisifiedLogin = function promisifiedLogin(req, user, options) {
  return new Promise(function (resolve, reject) {
    return req.login(user, options, function (err) {
      if (err) reject(err);else resolve();
    });
  });
};

var buildContext = function buildContext(contextParams) {
  var req = contextParams.req,
      res = contextParams.res;
  return _objectSpread({
    authenticate: function authenticate(name, options) {
      return promisifiedAuthenticate(req, res, name, options);
    },
    login: function login(user, options) {
      return promisifiedLogin(req, user, options);
    },
    logout: function logout() {
      return req.logout();
    },
    isAuthenticated: function isAuthenticated() {
      return req.isAuthenticated();
    },
    isUnauthenticated: function isUnauthenticated() {
      return req.isUnauthenticated();
    },

    get user() {
      return req.user;
    }

  }, contextParams);
};

var _default = buildContext;
exports["default"] = _default;